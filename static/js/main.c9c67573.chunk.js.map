{"version":3,"sources":["Components/Header/Header.tsx","Components/Form/Form.tsx","Components/HomeCard/HomeCard.tsx","Components/HomeCityCards/HomeCityCards.tsx","utils.js","apiCalls.tsx","Components/Loader/Loader.tsx","Components/TodaysForecastDetails/TodaysForecastDetails.tsx","Components/FiveDayForecastCard/FiveDayForecastCard.tsx","Components/FiveDayForecastCardContainer/FiveDayForecastCardContainer.tsx","Components/App/App.tsx","index.tsx"],"names":["Header","to","className","Form","onSearch","useState","cityInput","setCityInput","disableSearch","trim","handleSelect","value","a","geocodeByAddress","results","formatted_address","addCity","input","includes","split","slice","join","onChange","onSelect","searchOptions","types","getInputProps","suggestions","getSuggestionItemProps","loading","id","placeholder","type","onClick","disabled","map","suggestion","style","active","backgroundColor","description","HomeCard","key","clickedCard","name","details","hi","lo","icon","stateString","deleteCity","toFixed","src","alt","HomeCityCards","allCities","stateStrings","cityCards","city","i","main","temp_max","temp_min","weather","cleanCurrentWeatherData","data","Math","round","cleanFiveDayForecastData","daily","forEach","day","newDate","Date","dt","toString","toUpperCase","newHiTemp","temp","max","newLowTemp","min","hourly","hour","newTemp","current","feels_like","baseURL","apiKey","fetchCityForecast","cityName","fetch","result","status","undefined","Error","json","newResult","baseURL2","fetchForecastDetails","lat","lon","Loader","TodaysForecastDetails","humidity","sunrise","sunset","convertedDate","timeConvert","sun","newTime","toLocaleString","stamp","length","header","FiveDayForecastCard","days","FiveDayForecastCardContainer","fiveDayDetails","App","cities","setCities","error","setError","warning","setWarning","currentCity","setCurrentCity","forecastDetails","setForecastDetails","setStateString","fetchedCity","fetchedState","find","setStorage","setDetails","coords","fetchedDetails","useEffect","Object","keys","localStorage","cityValue","getItem","parsedCity","JSON","parse","push","filteredCity","removeItem","deleteDisplay","filteredCities","filter","stringifiedCity","stringify","setItem","exact","path","render","coord","match","params","router","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.c9c67573.chunk.js","sourcesContent":["import React from 'react'\nimport './Header.css'\nimport { NavLink } from 'react-router-dom'\n\n\nconst Header: React.FC = () => {\n  return (\n    <NavLink to=\"/hi-lo\" className='header-link'>\n      <header className=\"header\">\n        <h1>hi-lo weather ☀️</h1>\n      </header>\n    </NavLink>\n\n    );\n  }\n\nexport default Header\n","import React, { FC, useState } from 'react'\nimport PlacesAutocomplete, {\n  geocodeByAddress } from 'react-places-autocomplete'\nimport './Form.css'\ninterface SearchCityProps {\n  onSearch: (cityInput: string) => void;\n}\n\nexport const Form: FC<SearchCityProps> = ({onSearch}) => {\n  const [cityInput, setCityInput] = useState<string>('');\n  const disableSearch = cityInput.trim() === '';\n\n  const handleSelect = async (value:string) => {\n    const results = await geocodeByAddress(value)\n    setCityInput(results[0].formatted_address)\n  };\n\n  const cleanInput = (input: string) => {\n    if (input.includes('USA')) {\n      let newInput = input.split('')\n      let slicedInput = newInput.slice(0, -1)\n      return slicedInput.join('')\n    }\n    return input;\n  }\n\n  const addCity = () => {\n    onSearch(cleanInput(cityInput));\n    setCityInput('');\n  };\n\n  const searchOptions = {\n  types: ['(cities)']\n}\n\n  return (\n    <div className='searchForm'>\n      <form className=\"search-by-city\">\n      <PlacesAutocomplete\n        value={cityInput}\n        onChange={setCityInput}\n        onSelect={handleSelect}\n        searchOptions={searchOptions}\n        >\n        {({getInputProps, suggestions, getSuggestionItemProps, loading}) => (\n        <div className=\"autocomplete\">\n          <label>Search by City</label>\n          <input className=\"my-input\" id=\"searchInput\" {...getInputProps({placeholder: \"Type City\"})}/>\n          <button className=\"search-btn\" type='submit' onClick={addCity} disabled={disableSearch}>add</button>\n          <div className=\"suggestions\">\n            {loading ? <div>Loading...</div> : null}\n            {suggestions.map((suggestion) => {\n              const style = suggestion.active\n               ? {backgroundColor: \"#668b8a\"}\n               :  {backgroundColor: \"#ffff\"};\n\n              return <li{...getSuggestionItemProps(suggestion, {style})}>{suggestion.description}</li>\n            })}\n          </div>\n        </div>\n        )}\n      </PlacesAutocomplete>\n      </form>\n      </div>\n  )\n}\n\n\nexport default Form\n","import React, {FC} from \"react\";\nimport './HomeCard.css'\nimport { WeatherLocation, Forecast } from \"../../model/Weather\";\nimport { Link } from 'react-router-dom';\n\ninterface HomeCardProps {\n  key: number;\n  id: number;\n  onSelect: (city: WeatherLocation) => void;\n  clickedCard: WeatherLocation;\n  details: Forecast | null;\n  name: string;\n  hi: number;\n  lo: number;\n  description: string;\n  icon: string;\n  stateString: string;\n  deleteCity: (id: number) => void;\n}\n\nconst HomeCard : FC<HomeCardProps> = ({ key, id, onSelect, clickedCard, details, name, hi, lo, description, icon, stateString, deleteCity}) => {\n  return (\n    <>\n      <div key={key} className=\"city-card\" onClick={() => onSelect(clickedCard)} >\n          <h2 className='city-name'>{name}, {stateString}</h2>\n          <h3 className='today'>Today</h3>\n            <p className='hi-lo'>Hi: {hi.toFixed(0)}&deg; | Lo: {lo.toFixed(0)}&deg; </p>\n\n          <h3 className='status'>status: <br/>{description}</h3>\n          <img className='card-img' src={`http://openweathermap.org/img/wn/${icon}@2x.png`} alt=\"Weather Forecast Icon\"></img>\n      </div>\n      <Link to={'/hi-lo/'}><button className='delete-btn' onClick={() => deleteCity(id)}>&times;</button></ Link>\n    </>\n  )\n}\n\n\nexport default HomeCard;\n","import React, {FC} from \"react\";\nimport './HomeCityCards.css'\n\nimport { WeatherLocation, Forecast } from \"../../model/Weather\";\nimport HomeCard from \"../HomeCard/HomeCard\"\nimport { NavLink } from 'react-router-dom';\n\ninterface HomeCityProps {\n  allCities: WeatherLocation[];\n  onSelect: (city: WeatherLocation) => void;\n  clickedCard: WeatherLocation | null;\n  details: Forecast | null;\n  stateStrings: string[];\n  deleteCity: (id: number) => void;\n}\n\nexport const HomeCityCards: FC<HomeCityProps> = ({ allCities, onSelect, clickedCard, details, stateStrings, deleteCity }) => {\n\nconst cityCards = allCities.map((city, i) => {\n\n    return (\n      <NavLink className='card-link' to={`/hi-lo/${city.name}`}>\n        <HomeCard\n          key={city.id}\n          id={city.id}\n          onSelect={() => onSelect(city)}\n          clickedCard={city}\n          details={details}\n          name={city.name}\n          hi={city.main.temp_max}\n          lo={city.main.temp_min}\n          description={city.weather[0].description}\n          icon={city.weather[0].icon}\n          stateString={stateStrings[i]}\n          deleteCity={deleteCity}\n        />\n      </NavLink>\n    );\n  });\n  return <div className=\"cities-container\">{cityCards}</div>;\n};\n\nexport default HomeCityCards;\n","export const cleanCurrentWeatherData = (data) => {\n    data.main.temp_max = Math.round(((((data.main.temp_max) - 273.15) * 1.8)) + 32);\n    data.main.temp_min = Math.round(((((data.main.temp_min) - 273.15) * 1.8)) + 32);\n\n  return data\n}\n\nexport const cleanFiveDayForecastData = (data) => {\n  data.daily.forEach((day, i) => {\n    if (i > 0) {\n     const newDate = (new Date(day.dt * 1000)).toString().split(\" \").slice(0, 1).join(\" \").toUpperCase();\n     const newHiTemp = Math.round(((((day.temp.max) - 273.15) * 1.8)) + 32);\n     const newLowTemp = Math.round(((((day.temp.min) - 273.15) * 1.8)) + 32);\n\n     day.dt = newDate;\n     day.temp.max = newHiTemp;\n     day.temp.min = newLowTemp;\n   }\n   })\n   data.hourly.forEach((hour, i) => {\n      const newTemp = Math.round(((((hour.temp) - 273.15) * 1.8)) + 32);\n      hour.temp = newTemp;\n\n})\n  data.current.temp = Math.round(((((data.current.temp) - 273.15) * 1.8)) + 32)\n  data.current.feels_like = Math.round(((((data.current.feels_like) - 273.15) * 1.8)) + 32)\nreturn data\n}\n","import { WeatherLocation } from './model/Weather';\nimport { Forecast } from './model/Weather';\nimport {cleanFiveDayForecastData, cleanCurrentWeatherData} from './utils.js'\n\nconst baseURL = \"https://api.openweathermap.org/data/2.5/\";\nconst apiKey = \"dc464d940e53a603d97ca8d66b0afd96\";\n\nexport async function fetchCityForecast(cityName: string): Promise<WeatherLocation | undefined>\n{\n  const result = await fetch(`${baseURL}weather?q=${cityName}&appid=${apiKey}`)\n\n  if (result.status === 404) return undefined;\n  if (result.status !== 200) throw new Error('Failed to read location data');\n\n  if (result.status === 200) {\n\n    const newResult = await result.json()\n    return cleanCurrentWeatherData(newResult)\n  }\n};\n\nconst baseURL2 = \"https://api.openweathermap.org/data/2.5/onecall?\";\n\nexport async function fetchForecastDetails(lat: string, lon: string): Promise<Forecast | undefined>\n{\n  const result = await fetch(`${baseURL2}lat=${lat}&lon=${lon}&exclude=minutely&appid=${apiKey}`)\n\n  if (result.status === 404) return undefined;\n  if (result.status !== 200) throw new Error('Failed to read location data');\n  if (result.status === 200) {\n\n    const newResult = await result.json()\n    return cleanFiveDayForecastData(newResult)\n  }\n};\n","import { FC } from 'react';\n\nimport './Loader.css'\n\ninterface LoaderProps {\n  header: string;\n}\n\nexport const Loader: FC<LoaderProps> = () => {\n    return  (\n        <h2 className='loading'>loading weather data...🌤</h2>\n    )\n}\n\nexport default Loader;\n","import { WeatherLocation, Forecast } from \"../../model/Weather\";\nimport './TodaysForecastDetails.css'\nimport React, {FC} from \"react\";\nimport Loader from '../Loader/Loader'\n\ninterface TodaysDetailsProps {\n  details : Forecast | null;\n  clickedCard: WeatherLocation | null;\n}\n\nexport const TodaysForecastDetails: FC<TodaysDetailsProps> = ({ details, clickedCard }) => {\n\n  if (details && clickedCard) {\n    const { dt, feels_like, humidity, sunrise, sunset, temp } = details.current\n    const { id, main, description, icon } = details.current.weather[0]\n\n    var date = new Date(dt * 1000)\n    var convertedDate = date.toString().split(\" \").slice(0, 4).join(\" \")\n\n    const timeConvert = (sun: number) => {\n      let newTime: string = new Date(sun * 1000).toLocaleString()\n      let stamp = newTime.split(' ')[2]\n      let editTime = newTime.split(' ')[1]\n      if (editTime.length === 7) {\n        return newTime.split(' ')[1].split('').slice(0, 4).join('') + stamp\n      } else {\n        return newTime.split(' ')[1].split('').slice(0, 5).join('') + stamp\n      }\n    }\n\n    return (\n      <div>\n      <section className='todays-container'>\n        <article className='todays-details'>\n          <h1 className='todays-header'>Detailed forecast for {clickedCard.name}</h1>\n          <h2 className='converted-date'>{convertedDate}</h2>\n          <section className='column-section'>\n            <div className='left'>\n              <p className='curr-temp'>{temp.toFixed(0)}&deg;F</p>\n              <p className='high low'>hi {clickedCard.main.temp_max.toFixed(0)}&deg;F lo {clickedCard.main.temp_min.toFixed(0)}&deg;F</p>\n              <p className='feels-like-temp'>FEELS LIKE {feels_like.toFixed(0)}&deg;F</p>\n              <p className='descrip'>STATUS: {description.toUpperCase()}</p>\n              <p className='humidity'>HUMIDITY: {humidity}%</p>\n              <p className='sunrise'>SUNRISE: {timeConvert(sunrise)}</p>\n              <p className='sunset'>SUNSET: {timeConvert(sunset)}</p>\n            </div>\n            <div className='right'>\n              <section className='hourly-forecast'>\n                <img src={`http://openweathermap.org/img/wn/${details.hourly[0].weather[0].icon}@2x.png`} alt='Weather Icon'/>\n                <ul>\n                  <li>Time</li>\n                  <li>{timeConvert(details.hourly[0].dt)}</li>\n                  <li>Temp</li>\n                  <li>{details.hourly[0].temp.toFixed(0)}&deg;F</li>\n                </ul>\n              </section>\n              <section className='hourly-forecast'>\n                <img src={`http://openweathermap.org/img/wn/${details.hourly[1].weather[0].icon}@2x.png`} alt='Weather Icon'/>\n                <ul>\n                  <li>Time</li>\n                  <li>{timeConvert(details.hourly[1].dt)}</li>\n                  <li>Temp</li>\n                  <li>{details.hourly[1].temp.toFixed(0)}&deg;F</li>\n                </ul>\n              </section>\n              <section className='hourly-forecast'>\n                <img src={`http://openweathermap.org/img/wn/${details.hourly[2].weather[0].icon}@2x.png`} alt='Weather Icon'/>\n                <ul>\n                  <li>Time</li>\n                  <li>{timeConvert(details.hourly[2].dt)}</li>\n                  <li>Temp</li>\n                  <li>{details.hourly[2].temp.toFixed(0)}&deg;F</li>\n                </ul>\n              </section>\n              <section className='hourly-forecast'>\n                <img src={`http://openweathermap.org/img/wn/${details.hourly[3].weather[0].icon}@2x.png`} alt='Weather Icon'/>\n                <ul>\n                  <li>Time</li>\n                  <li>{timeConvert(details.hourly[3].dt)}</li>\n                  <li>Temp</li>\n                  <li>{details.hourly[3].temp.toFixed(0)}&deg;F</li>\n                </ul>\n              </section>\n              <section className='hourly-forecast'>\n                <img src={`http://openweathermap.org/img/wn/${details.hourly[4].weather[0].icon}@2x.png`} alt='Weather Icon'/>\n                <ul>\n                  <li>Time</li>\n                  <li>{timeConvert(details.hourly[4].dt)}</li>\n                  <li>Temp</li>\n                  <li>{details.hourly[4].temp.toFixed(0)}&deg;F</li>\n                </ul>\n              </section>\n            </div>\n          </section>\n        </article>\n      </section>\n      </div>\n    )\n  }\n  return <Loader header={''}/>;\n}\n\nexport default TodaysForecastDetails\n","import React, {FC} from \"react\";\nimport { Forecast, DailyForecast } from \"../../model/Weather\";\nimport './FiveDayForecastCard.css'\n\ninterface FiveDayForecastCardProps {\n  key: number;\n  temp: number;\n  days: Forecast | null;\n}\n\nexport const FiveDayForecastCard: FC<FiveDayForecastCardProps> = ({ key, temp, days }) => {\n  if (days) {\n    return (\n      <>\n      <h4 className='fiveday-title'>the upcoming days..</h4>\n      <section className=\"all-days\">\n        <section className=\"day-two\">\n          <p className=\"day-two-date\">{days.daily[1].dt}</p>\n          <img className=\"day-two-icon\" src={`http://openweathermap.org/img/wn/${days.daily[1].weather[0].icon}@2x.png`} alt=\"Weather Icon\"></img>\n          <p className=\"day-two-hi\">{days.daily[1].temp.max}°F</p>\n          <p className=\"day-two-lo\">{days.daily[1].temp.min}°F</p>\n        </section>\n        <section className=\"day-three\">\n          <p className=\"day-three-date\">{days.daily[2].dt}</p>\n          <img className=\"day-three-icon\" src={`http://openweathermap.org/img/wn/${days.daily[2].weather[0].icon}@2x.png`} alt=\"Weather Icon\"></img>\n          <p className=\"day-three-hi\">{days.daily[2].temp.max}°F</p>\n          <p className=\"day-three-lo\">{days.daily[2].temp.min}°F</p>\n        </section>\n        <section className=\"day-four\">\n          <p className=\"day-four-date\">{days.daily[3].dt}</p>\n          <img className=\"day-four-icon\" src={`http://openweathermap.org/img/wn/${days.daily[3].weather[0].icon}@2x.png`} alt=\"Weather Icon\"></img>\n          <p className=\"day-four-hi\">{days.daily[3].temp.max}°F</p>\n          <p className=\"day-four-lo\">{days.daily[3].temp.min}°F</p>\n        </section>\n        <section className=\"day-five\">\n          <p className=\"day-five-date\">{days.daily[4].dt}</p>\n          <img className=\"day-five-icon\" src={`http://openweathermap.org/img/wn/${days.daily[4].weather[0].icon}@2x.png`} alt=\"Weather Icon\"></img>\n          <p className=\"day-five-hi\">{days.daily[4].temp.max}°F</p>\n          <p className=\"day-five-lo\">{days.daily[4].temp.min}°F</p>\n        </section>\n      </section>\n      </>\n    )\n  }\n  return null;\n}\n\nexport default FiveDayForecastCard;\n","import React, {FC} from \"react\";\nimport { Forecast } from \"../../model/Weather\";\nimport FiveDayForecastCard from \"../FiveDayForecastCard/FiveDayForecastCard\"\n\ninterface FiveDayForecastCardContainerProps {\n  fiveDayDetails : Forecast | null\n}\n\nexport const FiveDayForecastCardContainer: FC<FiveDayForecastCardContainerProps> = ( {fiveDayDetails} ) => {\n  if (fiveDayDetails) {\n    const { dt, feels_like, humidity, sunrise, sunset, temp } = fiveDayDetails.current\n    const { id, main, description, icon } = fiveDayDetails.current.weather[0]\n    const dailyArray = fiveDayDetails.daily\n\n    return (\n      <>\n      <FiveDayForecastCard\n        key={id}\n        temp={temp}\n        days={fiveDayDetails}\n      />\n      </>\n    )\n  }\n  return null;\n}\n\n\nexport default FiveDayForecastCardContainer;\n","import { useState, FC, useEffect } from \"react\";\nimport \"./App.css\";\nimport Header from \"../Header/Header\";\nimport Form from \"../Form/Form\";\nimport HomeCityCards from \"../HomeCityCards/HomeCityCards\";\nimport { fetchCityForecast, fetchForecastDetails } from \"../../apiCalls\";\nimport { WeatherLocation, Coordinates, Forecast } from \"../../model/Weather\";\nimport { Route } from \"react-router-dom\";\nimport TodaysForecastDetails from \"../TodaysForecastDetails/TodaysForecastDetails\";\nimport FiveDayForecastCardContainer from \"../FiveDayForecastCardContainer/FiveDayForecastCardContainer\";\n\nconst App: FC = () => {\n  const [cities, setCities] = useState<WeatherLocation[]>([]);\n  const [error, setError] = useState(\"\");\n  const [warning, setWarning] = useState(\"\");\n  const [currentCity, setCurrentCity] = useState<WeatherLocation | null>(null);\n  const [forecastDetails, setForecastDetails] = useState<Forecast | null>(null);\n  const [stateStrings, setStateString] = useState<string[]>([]);\n\n  const resetAlerts = () => {\n    setError(\"\");\n    setWarning(\"\");\n  };\n\n  let addCity = async (cityName: string) => {\n    resetAlerts();\n    const fetchedCity = await fetchCityForecast(cityName);\n    let fetchedState = cityName.split(', ')[1]\n\n    if (fetchedState) {\n      setStateString([fetchedState, ...stateStrings])\n    }\n\n    if (!fetchedCity) {\n      setError(`No location found called '${cityName}'`);\n    } else if (cities.find((city) => city.id === fetchedCity.id)) {\n      setWarning(`Location '${cityName}' is already in the list.`);\n    } else {\n      setCities([fetchedCity, ...cities]);\n      setStorage(fetchedCity.id, fetchedCity)\n    }\n  };\n\n  let setDetails = async (coords: Coordinates) => {\n    const fetchedDetails = await fetchForecastDetails(\n      coords.lat.toString(),\n      coords.lon.toString()\n    );\n\n    if (!fetchedDetails) {\n      setDetails(coords);\n    } else {\n      setForecastDetails(fetchedDetails);\n    }\n  };\n\n  useEffect(() => {\n    let values = Object.keys(localStorage)\n    return values.forEach(value => {\n      let cityValue: any = localStorage.getItem(`${value}`)\n      let parsedCity = JSON.parse(cityValue)\n      setCities([parsedCity, ...cities])\n      cities.push(parsedCity)\n    })\n  }, [])\n\n  let deleteCity = (id: number) => {\n    const filteredCity: any = cities.find(city => city.id === id)\n    localStorage.removeItem(filteredCity.id)\n    deleteDisplay(id)\n  }\n\n  let deleteDisplay = (id: number) => {\n    const filteredCities: any = cities.filter(city => city.id !== id)\n    setCities(filteredCities)\n  }\n\n  let setStorage = (id: number, city: any) => {\n    let stringifiedCity = JSON.stringify(city)\n    localStorage.setItem(`${id}`, stringifiedCity)\n  }\n\n  return (\n    <div className=\"App\">\n      <Route\n        exact\n        path=\"/hi-lo\"\n        render={() => {\n          return (\n            <>\n              <Header />\n              <main className=\"main\">\n                <Form onSearch={addCity} />\n                {error ? <div className={\"error\"}>{error}</div> : null}\n                {warning ? <div className={\"warning\"}>{warning}</div> : null}\n\n                {!cities.length ? (\n                  <h2 className=\"no-city\">No forecasts to show</h2>\n                ) : (\n                  <HomeCityCards\n                    allCities={cities}\n                    onSelect={(city) => {\n                      setCurrentCity(city);\n                      setDetails(city.coord);\n                    }}\n                    clickedCard={currentCity}\n                    details={forecastDetails}\n                    stateStrings={stateStrings}\n                    deleteCity={deleteCity}\n                  />\n                )}\n              </main>\n            </>\n          );\n        }}\n      />\n      <Route\n        exact\n        path=\"/hi-lo/:name\"\n        render={({ match }) => {\n          if (!currentCity && !forecastDetails) {\n            addCity(match.params.name);\n            if (cities.length >= 1) {\n              setCurrentCity(cities[0]);\n              setDetails(cities[0].coord);\n            }\n          } else {\n          }\n          return (\n            <main className=\"details\">\n              <Header />\n              <TodaysForecastDetails\n                details={forecastDetails}\n                clickedCard={currentCity}\n              />\n              <FiveDayForecastCardContainer fiveDayDetails={forecastDetails} />\n            </main>\n          );\n        }}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport { BrowserRouter } from 'react-router-dom';\n\nconst router = <BrowserRouter> <App /> </BrowserRouter>;\n\nReactDOM.render(router, document.getElementById('root'));\n"],"sourceRoot":""}